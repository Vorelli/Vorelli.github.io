import { r as t, h as e, g as o, H as s, c as n } from "./p-2bbc009f.js"; import { s as i, S as r, b as a, E as c, c as h } from "./p-c0077c72.js"; import { r as d, a as p } from "./p-9e1eebe9.js"; function l(t, e) { if (t.openAccordionItemEls.includes(e)) { return t } return { ...t, openAccordionItemEls: t.keepOpen ? [...t.openAccordionItemEls, e] : [e] } } function m(t, e) { if (!t.openAccordionItemEls.includes(e)) { return t } return { ...t, openAccordionItemEls: t.openAccordionItemEls.filter((t => t !== e)) } } const E = (t = {}, e) => { switch (e.type) { case "ADD_ACCORDION_ITEM_EL": return { ...t, accordionItemEls: p(t.accordionItemEls, e.accordionItemEl).sort(i) }; case "REMOVE_ACCORDION_ITEM_EL": return { ...t, accordionItemEls: d(t.accordionItemEls, e.accordionItemEl).sort(i) }; case "OPEN_ACCORDION_ITEM_EL": return l(t, e.accordionItemEl); case "OPEN_ALL_ACCORDION_ITEM_ELS": return { ...t, openAccordionItemEls: t.accordionItemEls }; case "CLOSE_ACCORDION_ITEM_EL": return m(t, e.accordionItemEl); case "CLOSE_ALL_ACCORDION_ITEM_ELS": return { ...t, openAccordionItemEls: [] }; case "TOGGLE_ACCORDION_ITEM_EL": const o = t.openAccordionItemEls.includes(e.accordionItemEl); return o ? m(t, e.accordionItemEl) : l(t, e.accordionItemEl); default: return t } }; function u() { return { accordionItemEls: [], openAccordionItemEls: [], arrowPosition: "right", theme: "", keepOpen: false, isUserInteractionInProgress: false } } const f = ":host,*,*:before,*:after{box-sizing:border-box}:host{display:block}.component{background:transparent;border:1px solid #d6d6d6;border-radius:12px;overflow:hidden}.component.borderless{border:0}.component.sdx--dark-theme{border-color:#707070}"; const g = f; const I = class { arrowPositionChanged() { this.store.set("arrowPosition", this.arrowPosition) } keepOpenChanged() { this.store.set("keepOpen", this.keepOpen) } async open(t) { const e = this.state.get().accordionItemEls[t]; this.store.dispatch({ type: "OPEN_ACCORDION_ITEM_EL", accordionItemEl: e }) } async openAll() { this.store.dispatch({ type: "OPEN_ALL_ACCORDION_ITEM_ELS" }) } async close(t) { const e = this.state.get().accordionItemEls[t]; this.store.dispatch({ type: "CLOSE_ACCORDION_ITEM_EL", accordionItemEl: e }) } async closeAll() { this.store.dispatch({ type: "CLOSE_ALL_ACCORDION_ITEM_ELS" }) } async toggle(t) { const e = this.state.get().accordionItemEls[t]; this.store.dispatch({ type: "TOGGLE_ACCORDION_ITEM_EL", accordionItemEl: e }) } constructor(e) { t(this, e); this.state = undefined; this.keepOpen = false; this.arrowPosition = "right"; this.componentStyle = {}; this.theme = ""; this.store = new r(this, E, u(), ["accordionItemEls"]); this.store.set("arrowPosition", this.arrowPosition); this.store.set("theme", this.theme); this.store.set("keepOpen", this.keepOpen); this.store.flush() } componentDidLoad() { this.store.subscribe() } getComponentClassNames() { return { component: true, [a(this.el)]: true, [this.theme]: true } } render() { return e("div", { class: this.getComponentClassNames(), style: this.componentStyle }, e("slot", null)) } get el() { return o(this) } static get watchers() { return { arrowPosition: ["arrowPositionChanged"], keepOpen: ["keepOpenChanged"] } } }; I.style = g; const b = ":host,*,*:before,*:after{box-sizing:border-box}:host{display:block}:host p{padding:12px 16px}:host(.center){padding:0}:host(:not(:last-of-type)) .component{border-bottom:1px solid #d6d6d6}.component{position:relative}:host(:not(:last-of-type).sdx--dark-theme) .component{border-color:#707070}"; const _ = b; const O = class { openChanged() { this.open ? this.store.dispatch({ type: "OPEN_ACCORDION_ITEM_EL", accordionItemEl: this.el }) : this.store.dispatch({ type: "CLOSE_ACCORDION_ITEM_EL", accordionItemEl: this.el }) } constructor(e) { t(this, e); this.isReappending = false; this.state = undefined; this.open = false; this.store = new r(this, E, u(), ["openAccordionItemEls", "arrowPosition"]) } connectedCallback() { if (this.isReappending) { this.isReappending = false; return } this.store.dispatch({ type: "ADD_ACCORDION_ITEM_EL", accordionItemEl: this.el }); if (this.open) { this.store.dispatch({ type: "OPEN_ACCORDION_ITEM_EL", accordionItemEl: this.el }) } } disconnectedCallback() { if (this.el.isConnected) { this.isReappending = true; return } this.store.dispatch({ type: "REMOVE_ACCORDION_ITEM_EL", accordionItemEl: this.el }); if (this.open) { this.store.dispatch({ type: "CLOSE_ACCORDION_ITEM_EL", accordionItemEl: this.el }) } } componentDidLoad() { this.store.subscribe() } getHostClassNames() { const { arrowPosition: t } = this.state.get(); return { [a(this.el)]: true, [t]: true } } render() { return e(s, { class: this.getHostClassNames() }, e("div", { class: "component" }, e("slot", null))) } get el() { return o(this) } static get watchers() { return { open: ["openChanged"] } } }; O.style = _; const C = ":host,*,*:before,*:after{box-sizing:border-box}:host{display:none;overflow:hidden}.component{margin:0 16px 16px 16px}@media (min-width: 480px){.component{margin-bottom:24px}}.component.borderless{margin:0 16px 24px 0}.component.borderless.is-last-item{margin-top:24px;margin-bottom:0}"; const x = C; const w = class { stateChanged({ }, t) { const e = this.state.get(); const o = t.get(); if (e.openAccordionItemEls !== o.openAccordionItemEls) { this.openAccordionItemElsChanged(e, o) } } async toggle(t) { if (t) { this.store.dispatch({ type: "OPEN_ACCORDION_ITEM_EL", accordionItemEl: this.getParent() }) } else { this.store.dispatch({ type: "CLOSE_ACCORDION_ITEM_EL", accordionItemEl: this.getParent() }) } } getAnimationDuration() { if (!this.componentDidLoadComplete) { return 0 } return this.animated ? this.animationDuration : 0 } constructor(e) { t(this, e); this.sdxdisplaychange = n(this, "sdxdisplaychange", 7); this.animationDuration = 300; this.componentDidLoadComplete = false; this.animated = true; this.state = undefined; this.display = undefined; this.componentStyle = {}; this.store = new r(this, E, u(), ["accordionItemEls", "openAccordionItemEls", "arrowPosition", "theme"]) } componentWillLoad() { if (this.isOpen()) { this.open() } else { this.close() } } componentDidLoad() { this.store.subscribe(); this.componentDidLoadComplete = true } setDisplay(t, e) { this.display = t; if (!e) { return } this.sdxdisplaychange.emit({ display: t }) } openAccordionItemElsChanged({ }, t) { const e = this.isOpen(); const o = this.isOpen(t.openAccordionItemEls); if (e && !o) { this.open() } else if (!e && o) { this.close() } } open() { const { isUserInteractionInProgress: t } = this.state.get(); this.setDisplay("opening", t); c.set(this.el, { display: "block" }); this.el.style.height = "auto"; const e = this.el.clientHeight; c.set(this.el, { height: 0 }); c({ targets: this.el, duration: this.getAnimationDuration(), height: e, opacity: 1, easing: "cubicBezier(0.550, 0.085, 0.320, 1)", complete: () => { this.el.style.height = "auto"; this.setDisplay("open", t) } }) } close() { const { isUserInteractionInProgress: t } = this.state.get(); this.setDisplay("closing", t); this.el.style.height = `${this.el.clientHeight}px`; c({ targets: this.el, duration: this.getAnimationDuration(), height: 0, opacity: 0, easing: "cubicBezier(0.550, 0.085, 0.320, 1)", complete: () => { c.set(this.el, { display: "none" }); this.setDisplay("closed", t) } }) } getParent() { const { accordionItemEls: t } = this.state.get(); return t.find((t => h(this.el, t))) } isOpen(t) { if (!t) { t = this.state.get().openAccordionItemEls } return t.some((t => h(this.el, t))) } getComponentClassNames() { const { arrowPosition: t, theme: e, accordionItemEls: o } = this.state.get(); return { component: true, [t]: true, [e]: true, "is-first-item": this.getParent() === o[0], "is-last-item": this.getParent() === o[o.length - 1] } } render() { return e(s, { "aria-expanded": (this.display === "open").toString() }, e("div", { class: this.getComponentClassNames(), style: this.componentStyle }, e("slot", null))) } get el() { return o(this) } static get watchers() { return { state: ["stateChanged"] } } }; w.style = x; const y = ':host,*,*:before,*:after{box-sizing:border-box}.component{display:flex;align-items:center;width:100%;margin:0;padding:16px;border:0;cursor:pointer;outline:none;font-family:inherit;background:transparent;text-align:left;color:#333}@media (min-width: 480px){.component{padding-top:24px;padding-bottom:24px}}.component.borderless{padding-left:0;padding-right:0}.component.borderless.is-first-item{padding-top:0}.component.borderless.is-last-item{padding-bottom:0}.component:hover .arrow{position:relative}.component:hover .arrow::before,.component:hover .arrow::after{position:absolute;top:50%;transition:all 300ms cubic-bezier(0.4, 0, 0.2, 1);border-radius:2px;background:#0048cf;width:10px;height:2px;backface-visibility:hidden;content:""}.component:hover .arrow::before{left:0}.component:hover .arrow::after{left:6px}.component.open .arrow::before{transform:rotate(-45deg)}.component.open .arrow::after{transform:rotate(45deg)}.component.left{flex-direction:row-reverse}.component.left .header{padding-left:8px}.component.right .header{padding-right:8px}.component.center{justify-content:center;min-height:32px;border-top:1px solid #d6d6d6}.component.center .header{display:none}.component .header{flex:1}.component .arrow{position:relative;width:15px;background:#086adb}.component .arrow::before,.component .arrow::after{position:absolute;top:50%;transition:all 300ms cubic-bezier(0.4, 0, 0.2, 1);border-radius:2px;background:inherit;width:10px;height:2px;backface-visibility:hidden;content:""}.component .arrow::before{left:0}.component .arrow::after{left:6px}.component .arrow::before{transform:rotate(45deg)}.component .arrow::after{transform:rotate(-45deg)}.component.sdx--dark-theme{color:#e6e6e6}.component.sdx--dark-theme:hover .arrow{position:relative}.component.sdx--dark-theme:hover .arrow::before,.component.sdx--dark-theme:hover .arrow::after{position:absolute;top:50%;transition:all 300ms cubic-bezier(0.4, 0, 0.2, 1);border-radius:2px;background:#5ca3ff;width:10px;height:2px;backface-visibility:hidden;content:""}.component.sdx--dark-theme:hover .arrow::before{left:0}.component.sdx--dark-theme:hover .arrow::after{left:6px}.component.sdx--dark-theme .arrow{background:#4294ff}.component.sdx--dark-theme.center{border-top-color:#707070}'; const L = y; const A = class { onClick() { this.store.set("isUserInteractionInProgress", true); this.store.dispatch({ type: "TOGGLE_ACCORDION_ITEM_EL", accordionItemEl: this.getParent() }); this.store.set("isUserInteractionInProgress", false) } async closeItem() { this.store.dispatch({ type: "CLOSE_ACCORDION_ITEM_EL", accordionItemEl: this.getParent() }) } async openItem() { this.store.dispatch({ type: "OPEN_ACCORDION_ITEM_EL", accordionItemEl: this.getParent() }) } constructor(e) { t(this, e); this.state = undefined; this.buttonStyle = {}; this.arrowStyle = {}; this.store = new r(this, E, u(), ["accordionItemEls", "openAccordionItemEls", "arrowPosition", "theme"]) } componentDidLoad() { this.store.subscribe() } getParent() { const { accordionItemEls: t } = this.state.get(); return t.find((t => h(this.el, t))) } isOpen() { const { openAccordionItemEls: t } = this.state.get(); return t.some((t => h(this.el, t))) } getComponentClassNames() { const { arrowPosition: t, theme: e, accordionItemEls: o } = this.state.get(); return { component: true, [a(this.el)]: true, open: this.isOpen(), [t]: true, [e]: true, "is-first-item": this.getParent() === o[0], "is-last-item": this.getParent() === o[o.length - 1] } } render() { return e("button", { type: "button", class: this.getComponentClassNames(), style: this.buttonStyle, "aria-expanded": this.isOpen().toString() }, e("div", { class: "header" }, e("slot", null)), e("div", { class: "arrow", style: this.arrowStyle })) } get el() { return o(this) } }; A.style = L; const N = ":host,*,*:before,*:after{box-sizing:border-box}:host{padding-top:16px;padding-bottom:16px;padding-left:15px;padding-right:15px;display:inline-block;position:relative}"; const k = N; const D = class { constructor(e) { t(this, e) } render() { return e("slot", null) } }; D.style = k; export { I as sdx_accordion, O as sdx_accordion_item, w as sdx_accordion_item_body, A as sdx_accordion_item_header, D as sdx_accordion_item_section };
//# sourceMappingURL=p-5a81d137.entry.js.map
